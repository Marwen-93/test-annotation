{"version":3,"file":"ngx-annotate-text.js","sources":["../../../projects/ngx-annotate-text/src/lib/components/annotation/annotation.components.ts","../../../projects/ngx-annotate-text/src/lib/models/annotation.model.ts","../../../projects/ngx-annotate-text/src/lib/components/ngx-annotate-text/ngx-annotate-text.component.ts","../../../projects/ngx-annotate-text/src/lib/ngx-annotate-text.module.ts","../../../projects/ngx-annotate-text/src/public-api.ts","../../../projects/ngx-annotate-text/src/ngx-annotate-text.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Annotation } from '../../models/annotation.model';\n\n@Component({\n  selector: 'ngx-annotation',\n  templateUrl: './annotation.component.html',\n  styleUrls: ['./annotation.component.css']\n})\nexport class AnnotationComponent {\n\n  @Input() annotation: Annotation;\n  @Input() removable = true;\n  @Output() removeAnnotation = new EventEmitter<Annotation>();\n\n  constructor() { }\n\n}\n","import { ISelection } from './selection.model';\n\nexport interface IAnnotation {\n    text: string;\n    label: string;\n    color: string;\n}\n\nexport class Annotation implements IAnnotation, ISelection {\n    startIndex: number;\n    endIndex: number;\n    text: string;\n    label: string;\n    color: string;\n\n    /**\n     * Represents an annotated part of the referenced text.\n     *\n     * @param startIndex The zero-based index number indicating the beginning of this annotation.\n     * @param endIndex The zero-based index number indicating the end of the annotation. The annotation\n     * includes the characters up to, but not including, the character indicated by the end.\n     * @param label Arbitrary string displayed as label below the annotation, e. g. `City`.\n     * @param color The color of the box which is displayed around the annotation, e. g. 'red' or 'rgb(220, 53, 69)'.\n     */\n    constructor(startIndex: number, endIndex: number, label: string, color: string) {\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n        this.label = label;\n        this.color = color;\n    }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Annotation } from '../../models/annotation.model';\nimport { ISelection } from '../../models/selection.model';\n\n@Component({\n  selector: 'ngx-annotate-text',\n  templateUrl: './ngx-annotate-text.component.html',\n  styleUrls: ['./ngx-annotate-text.component.css']\n})\nexport class NgxAnnotateTextComponent implements OnInit, OnChanges {\n\n  /** Represents the parts of the given text which shall be annotated. */\n  @Input() annotations: Annotation[] = [];\n\n  /** An optional CSS class applied to all elements which wrap the annotated parts of the given text. */\n  @Input() annotationClass: string;\n\n  /**\n   * Determines whether annotations shall have a small button in the top right corner so that the user can\n   * remove an annotation.\n   */\n  @Input() removable = true;\n\n  /** The text which shall be displayed and annotated. */\n  @Input() text: string;\n\n  /** Emits the list of existing annotations after an element has been removed. */\n  @Output() annotationsChange: EventEmitter<Annotation[]> = new EventEmitter<Annotation[]>();\n\n  /** @internal */\n  tokens: any[] = [];\n  private selectionStart: number;\n  private selectionEnd: number;\n  private annotationStartingIndices: Map<number, Annotation> = new Map();\n\n  constructor(private elementRef: ElementRef) { }\n\n  ngOnInit(): void {\n    this.splitTextIntoTokens();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('annotations' in changes || 'text' in changes) {\n      this.splitTextIntoTokens();\n    }\n  }\n\n  /**\n   * Returns the start index and end index of the currently selected text range. Returns `undefined`\n   * if no text is currently selected.\n   */\n  public getCurrentTextSelection(): ISelection {\n    this.updateTextSelection();\n\n    if (this.selectionStart === undefined || this.selectionEnd === undefined || this.selectionStart >= this.selectionEnd) {\n      return undefined;\n    }\n\n    return {\n      startIndex: this.selectionStart,\n      endIndex: this.selectionEnd,\n    };\n  }\n\n  /** @internal */\n  isAnnotation(annotation: Annotation | string): boolean {\n    return annotation instanceof Annotation;\n  }\n\n  /** @internal */\n  onRemoveAnnotation(annotation: Annotation): void {\n    this.annotations = this.annotations.filter(a => a !== annotation);\n    this.annotationsChange.emit(this.annotations);\n    this.splitTextIntoTokens();\n  }\n\n  private updateTextSelection(): void {\n    if (window.getSelection && window.getSelection().rangeCount > 0) {\n      const range = window.getSelection().getRangeAt(0);\n      const preSelectionRange = range.cloneRange();\n      preSelectionRange.selectNodeContents(this.elementRef.nativeElement);\n      preSelectionRange.setEnd(range.startContainer, range.startOffset);\n      this.selectionStart = [...preSelectionRange.toString()].length;\n      this.selectionEnd = this.selectionStart + [...range.toString()].length;\n    } else {\n      this.selectionStart = undefined;\n      this.selectionEnd = undefined;\n    }\n  }\n\n  private splitTextIntoTokens(): void {\n    this.tokens = [];\n    this.annotationStartingIndices = new Map();\n\n    // Creates a map which contains the starting indices for each annotation\n    // as keys. This way, we know the positions / indices in the text where\n    // we need to display an annotation instead of the plaintext.\n    this.annotations.forEach((a: Annotation) => {\n      this.annotationStartingIndices.set(a.startIndex, a);\n      a.text = this.text.substring(a.startIndex, a.endIndex);\n    });\n\n    let currentIndex = 0;\n    let isAnnotationActive = false;\n    let annotationActiveUntilIndex = 0;\n    let buffer = '';\n\n    this.text.split('').forEach((char: string) => {\n      if (annotationActiveUntilIndex === currentIndex) {\n        isAnnotationActive = false;\n      }\n\n      if (!this.annotationStartingIndices.has(currentIndex) && !isAnnotationActive) {\n        buffer += char;\n      } else if (this.annotationStartingIndices.has(currentIndex)) {\n        if (buffer.length > 0) {\n          this.tokens.push(buffer);\n        }\n        this.tokens.push(this.annotationStartingIndices.get(currentIndex));\n        annotationActiveUntilIndex = this.annotationStartingIndices.get(currentIndex).endIndex;\n        buffer = '';\n        isAnnotationActive = true;\n      }\n\n      currentIndex++;\n    });\n\n    if (buffer.length > 0) {\n      this.tokens.push(buffer);\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AnnotationComponent } from './components/annotation/annotation.components';\nimport { NgxAnnotateTextComponent } from './components/ngx-annotate-text/ngx-annotate-text.component';\n\n@NgModule({\n  declarations: [\n    AnnotationComponent,\n    NgxAnnotateTextComponent,\n  ],\n  imports: [\n    BrowserModule,\n  ],\n  exports: [NgxAnnotateTextComponent]\n})\nexport class NgxAnnotateTextModule { }\n","/*\n * Public API Surface of ngx-annotate-text\n */\n\nexport * from './lib/ngx-annotate-text.module';\nexport * from './lib/components/ngx-annotate-text/ngx-annotate-text.component';\nexport * from './lib/models/annotation.model';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AnnotationComponent as ɵa} from './lib/components/annotation/annotation.components';"]}