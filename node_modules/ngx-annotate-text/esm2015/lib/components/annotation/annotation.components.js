import { Component, EventEmitter, Input, Output } from '@angular/core';
export class AnnotationComponent {
    constructor() {
        this.removable = true;
        this.removeAnnotation = new EventEmitter();
    }
}
AnnotationComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-annotation',
                template: "<span class=\"annotation-parent\" [style.border-color]=\"annotation.color\" [style.background-color]=\"annotation.color\">\n\n    <span class=\"annotation-content\">\n        <pre>{{ annotation.text }}</pre>\n    </span>\n\n    <!-- Instead of setting the property \"innerText\" of this HTML element, we set \"data-label\".\n        In CSS, we can then reference the content of this property and can use the CSS pseudo-\n        element \"::after\" to insert the content of \"data-label\" as text into the DOM.\n        What's the advantage of this? At first, I tried to use the \"innerText\" property of this\n        HTML element to visualize the annotation's label. Whenever the user selected a range of\n        the original text, then the labels of the annotations were counted into the range, too.\n        This made it difficult to extract which text range the user actually selected. By using\n        the CSS pseudo-class \"::after\", we can prevent the annotations' labels from being\n        included into the selected text range. -->\n    <span class=\"annotation-label\" [attr.data-label]=\"annotation.label\" [style.background-color]=\"annotation.color\">\n    </span>\n\n    <span class=\"annotation-button\" *ngIf=\"removable\">\n        <span>\n            <button class=\"remove-annotation\" (click)=\"removeAnnotation.emit(annotation)\">\n            </button>\n        </span>\n    </span>\n\n</span>",
                styles: ["span.annotation-parent{border:2px solid;border-radius:4px;box-shadow:2px 4px 20px rgba(0,0,0,.1);color:rgba(0,0,0,.6);display:block;font-weight:500;line-height:1.5;margin:0 0 .5rem;min-width:26px;padding:0;white-space:normal;word-break:break-word;word-wrap:break-word}span.annotation-content{align-items:center;background-color:#fff;border-top-left-radius:2px;border-top-right-radius:2px;display:flex;flex-wrap:wrap;justify-content:center;padding:0 2px;text-align:center;white-space:normal}span.annotation-content pre{background-color:transparent;box-sizing:border-box;color:inherit;display:block;font-family:inherit;font-size:inherit;margin-bottom:0;margin-top:0;overflow:auto;padding:0}span.annotation-label{-webkit-touch-callout:none;-webkit-user-select:none;align-items:center;color:#fff;display:flex;justify-content:center;line-height:.8rem;margin:0;padding:2px 8px 0;text-align:center;user-select:none}span.annotation-label:after{content:attr(data-label)}span.annotation-button{display:block;height:0;position:relative;width:100%}span.annotation-button span{position:absolute;right:.47rem;top:-2.9rem}button.remove-annotation{-moz-appearance:none;-webkit-appearance:none;-webkit-user-select:none;appearance:none;background-color:rgba(10,10,10,.2);border:none;border-radius:1000px;cursor:pointer;display:inline-block;flex-grow:0;flex-shrink:0;height:16px;max-height:16px;max-width:16px;min-height:16px;min-width:16px;outline:0;position:absolute;user-select:none;width:16px}button.remove-annotation:hover{background-color:rgba(10,10,10,.5)}button.remove-annotation:after,button.remove-annotation:before{background-color:#fff;content:\"\";display:block;left:50%;position:absolute;top:50%;transform:translateX(-50%) translateY(-50%) rotate(45deg);transform-origin:center center}button.remove-annotation:after{height:50%;width:2px}button.remove-annotation:before{height:2px;width:50%}"]
            },] }
];
AnnotationComponent.ctorParameters = () => [];
AnnotationComponent.propDecorators = {
    annotation: [{ type: Input }],
    removable: [{ type: Input }],
    removeAnnotation: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ub3RhdGlvbi5jb21wb25lbnRzLmpzIiwic291cmNlUm9vdCI6Ii9ob21lL3BoaWwvd29ya3NwYWNlL25neC1hbm5vdGF0ZS10ZXh0LXdvcmtzcGFjZS9wcm9qZWN0cy9uZ3gtYW5ub3RhdGUtdGV4dC9zcmMvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9hbm5vdGF0aW9uL2Fubm90YXRpb24uY29tcG9uZW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBUXZFLE1BQU0sT0FBTyxtQkFBbUI7SUFNOUI7UUFIUyxjQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLHFCQUFnQixHQUFHLElBQUksWUFBWSxFQUFjLENBQUM7SUFFNUMsQ0FBQzs7O1lBWGxCLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQix3NUNBQTBDOzthQUUzQzs7Ozt5QkFHRSxLQUFLO3dCQUNMLEtBQUs7K0JBQ0wsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbm5vdGF0aW9uIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2Fubm90YXRpb24ubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZ3gtYW5ub3RhdGlvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9hbm5vdGF0aW9uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vYW5ub3RhdGlvbi5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgQW5ub3RhdGlvbkNvbXBvbmVudCB7XG5cbiAgQElucHV0KCkgYW5ub3RhdGlvbjogQW5ub3RhdGlvbjtcbiAgQElucHV0KCkgcmVtb3ZhYmxlID0gdHJ1ZTtcbiAgQE91dHB1dCgpIHJlbW92ZUFubm90YXRpb24gPSBuZXcgRXZlbnRFbWl0dGVyPEFubm90YXRpb24+KCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxufVxuIl19