import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { Annotation } from '../../models/annotation.model';
export class NgxAnnotateTextComponent {
    constructor(elementRef) {
        this.elementRef = elementRef;
        /** Represents the parts of the given text which shall be annotated. */
        this.annotations = [];
        /**
         * Determines whether annotations shall have a small button in the top right corner so that the user can
         * remove an annotation.
         */
        this.removable = true;
        /** Emits the list of existing annotations after an element has been removed. */
        this.annotationsChange = new EventEmitter();
        /** @internal */
        this.tokens = [];
        this.annotationStartingIndices = new Map();
    }
    ngOnInit() {
        this.splitTextIntoTokens();
    }
    ngOnChanges(changes) {
        if ('annotations' in changes || 'text' in changes) {
            this.splitTextIntoTokens();
        }
    }
    /**
     * Returns the start index and end index of the currently selected text range. Returns `undefined`
     * if no text is currently selected.
     */
    getCurrentTextSelection() {
        this.updateTextSelection();
        if (this.selectionStart === undefined || this.selectionEnd === undefined || this.selectionStart >= this.selectionEnd) {
            return undefined;
        }
        return {
            startIndex: this.selectionStart,
            endIndex: this.selectionEnd,
        };
    }
    /** @internal */
    isAnnotation(annotation) {
        return annotation instanceof Annotation;
    }
    /** @internal */
    onRemoveAnnotation(annotation) {
        this.annotations = this.annotations.filter(a => a !== annotation);
        this.annotationsChange.emit(this.annotations);
        this.splitTextIntoTokens();
    }
    updateTextSelection() {
        if (window.getSelection && window.getSelection().rangeCount > 0) {
            const range = window.getSelection().getRangeAt(0);
            const preSelectionRange = range.cloneRange();
            preSelectionRange.selectNodeContents(this.elementRef.nativeElement);
            preSelectionRange.setEnd(range.startContainer, range.startOffset);
            this.selectionStart = [...preSelectionRange.toString()].length;
            this.selectionEnd = this.selectionStart + [...range.toString()].length;
        }
        else {
            this.selectionStart = undefined;
            this.selectionEnd = undefined;
        }
    }
    splitTextIntoTokens() {
        this.tokens = [];
        this.annotationStartingIndices = new Map();
        // Creates a map which contains the starting indices for each annotation
        // as keys. This way, we know the positions / indices in the text where
        // we need to display an annotation instead of the plaintext.
        this.annotations.forEach((a) => {
            this.annotationStartingIndices.set(a.startIndex, a);
            a.text = this.text.substring(a.startIndex, a.endIndex);
        });
        let currentIndex = 0;
        let isAnnotationActive = false;
        let annotationActiveUntilIndex = 0;
        let buffer = '';
        this.text.split('').forEach((char) => {
            if (annotationActiveUntilIndex === currentIndex) {
                isAnnotationActive = false;
            }
            if (!this.annotationStartingIndices.has(currentIndex) && !isAnnotationActive) {
                buffer += char;
            }
            else if (this.annotationStartingIndices.has(currentIndex)) {
                if (buffer.length > 0) {
                    this.tokens.push(buffer);
                }
                this.tokens.push(this.annotationStartingIndices.get(currentIndex));
                annotationActiveUntilIndex = this.annotationStartingIndices.get(currentIndex).endIndex;
                buffer = '';
                isAnnotationActive = true;
            }
            currentIndex++;
        });
        if (buffer.length > 0) {
            this.tokens.push(buffer);
        }
    }
}
NgxAnnotateTextComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-annotate-text',
                template: "<span *ngFor=\"let token of tokens\">\n\n  <ngx-annotation *ngIf=\"isAnnotation(token)\" [annotation]=\"token\" [removable]=\"removable\"\n    (removeAnnotation)=\"onRemoveAnnotation($event)\" [class]=\"(annotationClass || '')\">\n  </ngx-annotation>\n\n  <span *ngIf=\"!isAnnotation(token)\" class=\"unlabeled\">{{ token }}</span>\n\n</span>",
                styles: [":host(){align-items:flex-start;display:flex;flex-wrap:wrap;white-space:pre-wrap}span.unlabeled{line-height:1.5rem}"]
            },] }
];
NgxAnnotateTextComponent.ctorParameters = () => [
    { type: ElementRef }
];
NgxAnnotateTextComponent.propDecorators = {
    annotations: [{ type: Input }],
    annotationClass: [{ type: Input }],
    removable: [{ type: Input }],
    text: [{ type: Input }],
    annotationsChange: [{ type: Output }]
};
//# sourceMappingURL=data:application/json;base64,