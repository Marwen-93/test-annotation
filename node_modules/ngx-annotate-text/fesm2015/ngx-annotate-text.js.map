{"version":3,"file":"ngx-annotate-text.js","sources":["../../../projects/ngx-annotate-text/src/lib/components/annotation/annotation.components.ts","../../../projects/ngx-annotate-text/src/lib/models/annotation.model.ts","../../../projects/ngx-annotate-text/src/lib/components/ngx-annotate-text/ngx-annotate-text.component.ts","../../../projects/ngx-annotate-text/src/lib/ngx-annotate-text.module.ts","../../../projects/ngx-annotate-text/src/public-api.ts","../../../projects/ngx-annotate-text/src/ngx-annotate-text.ts"],"sourcesContent":["import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Annotation } from '../../models/annotation.model';\n\n@Component({\n  selector: 'ngx-annotation',\n  templateUrl: './annotation.component.html',\n  styleUrls: ['./annotation.component.css']\n})\nexport class AnnotationComponent {\n\n  @Input() annotation: Annotation;\n  @Input() removable = true;\n  @Output() removeAnnotation = new EventEmitter<Annotation>();\n\n  constructor() { }\n\n}\n","import { ISelection } from './selection.model';\n\nexport interface IAnnotation {\n    text: string;\n    label: string;\n    color: string;\n}\n\nexport class Annotation implements IAnnotation, ISelection {\n    startIndex: number;\n    endIndex: number;\n    text: string;\n    label: string;\n    color: string;\n\n    /**\n     * Represents an annotated part of the referenced text.\n     *\n     * @param startIndex The zero-based index number indicating the beginning of this annotation.\n     * @param endIndex The zero-based index number indicating the end of the annotation. The annotation\n     * includes the characters up to, but not including, the character indicated by the end.\n     * @param label Arbitrary string displayed as label below the annotation, e. g. `City`.\n     * @param color The color of the box which is displayed around the annotation, e. g. 'red' or 'rgb(220, 53, 69)'.\n     */\n    constructor(startIndex: number, endIndex: number, label: string, color: string) {\n        this.startIndex = startIndex;\n        this.endIndex = endIndex;\n        this.label = label;\n        this.color = color;\n    }\n}\n","import { Component, ElementRef, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\nimport { Annotation } from '../../models/annotation.model';\nimport { ISelection } from '../../models/selection.model';\n\n@Component({\n  selector: 'ngx-annotate-text',\n  templateUrl: './ngx-annotate-text.component.html',\n  styleUrls: ['./ngx-annotate-text.component.css']\n})\nexport class NgxAnnotateTextComponent implements OnInit, OnChanges {\n\n  /** Represents the parts of the given text which shall be annotated. */\n  @Input() annotations: Annotation[] = [];\n\n  /** An optional CSS class applied to all elements which wrap the annotated parts of the given text. */\n  @Input() annotationClass: string;\n\n  /**\n   * Determines whether annotations shall have a small button in the top right corner so that the user can\n   * remove an annotation.\n   */\n  @Input() removable = true;\n\n  /** The text which shall be displayed and annotated. */\n  @Input() text: string;\n\n  /** Emits the list of existing annotations after an element has been removed. */\n  @Output() annotationsChange: EventEmitter<Annotation[]> = new EventEmitter<Annotation[]>();\n\n  /** @internal */\n  tokens: any[] = [];\n  private selectionStart: number;\n  private selectionEnd: number;\n  private annotationStartingIndices: Map<number, Annotation> = new Map();\n\n  constructor(private elementRef: ElementRef) { }\n\n  ngOnInit(): void {\n    this.splitTextIntoTokens();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('annotations' in changes || 'text' in changes) {\n      this.splitTextIntoTokens();\n    }\n  }\n\n  /**\n   * Returns the start index and end index of the currently selected text range. Returns `undefined`\n   * if no text is currently selected.\n   */\n  public getCurrentTextSelection(): ISelection {\n    this.updateTextSelection();\n\n    if (this.selectionStart === undefined || this.selectionEnd === undefined || this.selectionStart >= this.selectionEnd) {\n      return undefined;\n    }\n\n    return {\n      startIndex: this.selectionStart,\n      endIndex: this.selectionEnd,\n    };\n  }\n\n  /** @internal */\n  isAnnotation(annotation: Annotation | string): boolean {\n    return annotation instanceof Annotation;\n  }\n\n  /** @internal */\n  onRemoveAnnotation(annotation: Annotation): void {\n    this.annotations = this.annotations.filter(a => a !== annotation);\n    this.annotationsChange.emit(this.annotations);\n    this.splitTextIntoTokens();\n  }\n\n  private updateTextSelection(): void {\n    if (window.getSelection && window.getSelection().rangeCount > 0) {\n      const range = window.getSelection().getRangeAt(0);\n      const preSelectionRange = range.cloneRange();\n      preSelectionRange.selectNodeContents(this.elementRef.nativeElement);\n      preSelectionRange.setEnd(range.startContainer, range.startOffset);\n      this.selectionStart = [...preSelectionRange.toString()].length;\n      this.selectionEnd = this.selectionStart + [...range.toString()].length;\n    } else {\n      this.selectionStart = undefined;\n      this.selectionEnd = undefined;\n    }\n  }\n\n  private splitTextIntoTokens(): void {\n    this.tokens = [];\n    this.annotationStartingIndices = new Map();\n\n    // Creates a map which contains the starting indices for each annotation\n    // as keys. This way, we know the positions / indices in the text where\n    // we need to display an annotation instead of the plaintext.\n    this.annotations.forEach((a: Annotation) => {\n      this.annotationStartingIndices.set(a.startIndex, a);\n      a.text = this.text.substring(a.startIndex, a.endIndex);\n    });\n\n    let currentIndex = 0;\n    let isAnnotationActive = false;\n    let annotationActiveUntilIndex = 0;\n    let buffer = '';\n\n    this.text.split('').forEach((char: string) => {\n      if (annotationActiveUntilIndex === currentIndex) {\n        isAnnotationActive = false;\n      }\n\n      if (!this.annotationStartingIndices.has(currentIndex) && !isAnnotationActive) {\n        buffer += char;\n      } else if (this.annotationStartingIndices.has(currentIndex)) {\n        if (buffer.length > 0) {\n          this.tokens.push(buffer);\n        }\n        this.tokens.push(this.annotationStartingIndices.get(currentIndex));\n        annotationActiveUntilIndex = this.annotationStartingIndices.get(currentIndex).endIndex;\n        buffer = '';\n        isAnnotationActive = true;\n      }\n\n      currentIndex++;\n    });\n\n    if (buffer.length > 0) {\n      this.tokens.push(buffer);\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AnnotationComponent } from './components/annotation/annotation.components';\nimport { NgxAnnotateTextComponent } from './components/ngx-annotate-text/ngx-annotate-text.component';\n\n@NgModule({\n  declarations: [\n    AnnotationComponent,\n    NgxAnnotateTextComponent,\n  ],\n  imports: [\n    BrowserModule,\n  ],\n  exports: [NgxAnnotateTextComponent]\n})\nexport class NgxAnnotateTextModule { }\n","/*\n * Public API Surface of ngx-annotate-text\n */\n\nexport * from './lib/ngx-annotate-text.module';\nexport * from './lib/components/ngx-annotate-text/ngx-annotate-text.component';\nexport * from './lib/models/annotation.model';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {AnnotationComponent as Éµa} from './lib/components/annotation/annotation.components';"],"names":[],"mappings":"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"}