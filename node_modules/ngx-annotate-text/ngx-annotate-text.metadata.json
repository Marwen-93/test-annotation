{"__symbolic":"module","version":4,"metadata":{"NgxAnnotateTextModule":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"NgModule","line":5,"character":1},"arguments":[{"declarations":[{"__symbolic":"reference","name":"ɵa"},{"__symbolic":"reference","name":"NgxAnnotateTextComponent"}],"imports":[{"__symbolic":"reference","module":"@angular/platform-browser","name":"BrowserModule","line":11,"character":4}],"exports":[{"__symbolic":"reference","name":"NgxAnnotateTextComponent"}]}]}],"members":{}},"NgxAnnotateTextComponent":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":4,"character":1},"arguments":[{"selector":"ngx-annotate-text","template":"<span *ngFor=\"let token of tokens\">\n\n  <ngx-annotation *ngIf=\"isAnnotation(token)\" [annotation]=\"token\" [removable]=\"removable\"\n    (removeAnnotation)=\"onRemoveAnnotation($event)\" [class]=\"(annotationClass || '')\">\n  </ngx-annotation>\n\n  <span *ngIf=\"!isAnnotation(token)\" class=\"unlabeled\">{{ token }}</span>\n\n</span>","styles":[":host(){align-items:flex-start;display:flex;flex-wrap:wrap;white-space:pre-wrap}span.unlabeled{line-height:1.5rem}"]}]}],"members":{"annotations":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":12,"character":3}}]}],"annotationClass":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":15,"character":3}}]}],"removable":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":21,"character":3}}]}],"text":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":24,"character":3}}]}],"annotationsChange":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":27,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","module":"@angular/core","name":"ElementRef","line":35,"character":34}]}],"ngOnInit":[{"__symbolic":"method"}],"ngOnChanges":[{"__symbolic":"method"}],"getCurrentTextSelection":[{"__symbolic":"method"}],"isAnnotation":[{"__symbolic":"method"}],"onRemoveAnnotation":[{"__symbolic":"method"}],"updateTextSelection":[{"__symbolic":"method"}],"splitTextIntoTokens":[{"__symbolic":"method"}]}},"IAnnotation":{"__symbolic":"interface"},"Annotation":{"__symbolic":"class","members":{"__ctor__":[{"__symbolic":"constructor","parameters":[{"__symbolic":"reference","name":"number"},{"__symbolic":"reference","name":"number"},{"__symbolic":"reference","name":"string"},{"__symbolic":"reference","name":"string"}]}]}},"ɵa":{"__symbolic":"class","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Component","line":3,"character":1},"arguments":[{"selector":"ngx-annotation","template":"<span class=\"annotation-parent\" [style.border-color]=\"annotation.color\" [style.background-color]=\"annotation.color\">\n\n    <span class=\"annotation-content\">\n        <pre>{{ annotation.text }}</pre>\n    </span>\n\n    <!-- Instead of setting the property \"innerText\" of this HTML element, we set \"data-label\".\n        In CSS, we can then reference the content of this property and can use the CSS pseudo-\n        element \"::after\" to insert the content of \"data-label\" as text into the DOM.\n        What's the advantage of this? At first, I tried to use the \"innerText\" property of this\n        HTML element to visualize the annotation's label. Whenever the user selected a range of\n        the original text, then the labels of the annotations were counted into the range, too.\n        This made it difficult to extract which text range the user actually selected. By using\n        the CSS pseudo-class \"::after\", we can prevent the annotations' labels from being\n        included into the selected text range. -->\n    <span class=\"annotation-label\" [attr.data-label]=\"annotation.label\" [style.background-color]=\"annotation.color\">\n    </span>\n\n    <span class=\"annotation-button\" *ngIf=\"removable\">\n        <span>\n            <button class=\"remove-annotation\" (click)=\"removeAnnotation.emit(annotation)\">\n            </button>\n        </span>\n    </span>\n\n</span>","styles":["span.annotation-parent{border:2px solid;border-radius:4px;box-shadow:2px 4px 20px rgba(0,0,0,.1);color:rgba(0,0,0,.6);display:block;font-weight:500;line-height:1.5;margin:0 0 .5rem;min-width:26px;padding:0;white-space:normal;word-break:break-word;word-wrap:break-word}span.annotation-content{align-items:center;background-color:#fff;border-top-left-radius:2px;border-top-right-radius:2px;display:flex;flex-wrap:wrap;justify-content:center;padding:0 2px;text-align:center;white-space:normal}span.annotation-content pre{background-color:transparent;box-sizing:border-box;color:inherit;display:block;font-family:inherit;font-size:inherit;margin-bottom:0;margin-top:0;overflow:auto;padding:0}span.annotation-label{-webkit-touch-callout:none;-webkit-user-select:none;align-items:center;color:#fff;display:flex;justify-content:center;line-height:.8rem;margin:0;padding:2px 8px 0;text-align:center;user-select:none}span.annotation-label:after{content:attr(data-label)}span.annotation-button{display:block;height:0;position:relative;width:100%}span.annotation-button span{position:absolute;right:.47rem;top:-2.9rem}button.remove-annotation{-moz-appearance:none;-webkit-appearance:none;-webkit-user-select:none;appearance:none;background-color:rgba(10,10,10,.2);border:none;border-radius:1000px;cursor:pointer;display:inline-block;flex-grow:0;flex-shrink:0;height:16px;max-height:16px;max-width:16px;min-height:16px;min-width:16px;outline:0;position:absolute;user-select:none;width:16px}button.remove-annotation:hover{background-color:rgba(10,10,10,.5)}button.remove-annotation:after,button.remove-annotation:before{background-color:#fff;content:\"\";display:block;left:50%;position:absolute;top:50%;transform:translateX(-50%) translateY(-50%) rotate(45deg);transform-origin:center center}button.remove-annotation:after{height:50%;width:2px}button.remove-annotation:before{height:2px;width:50%}"]}]}],"members":{"annotation":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":10,"character":3}}]}],"removable":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Input","line":11,"character":3}}]}],"removeAnnotation":[{"__symbolic":"property","decorators":[{"__symbolic":"call","expression":{"__symbolic":"reference","module":"@angular/core","name":"Output","line":12,"character":3}}]}],"__ctor__":[{"__symbolic":"constructor"}]}}},"origins":{"NgxAnnotateTextModule":"./lib/ngx-annotate-text.module","NgxAnnotateTextComponent":"./lib/components/ngx-annotate-text/ngx-annotate-text.component","IAnnotation":"./lib/models/annotation.model","Annotation":"./lib/models/annotation.model","ɵa":"./lib/components/annotation/annotation.components"},"importAs":"ngx-annotate-text"}